import csv

"""SPLTrac: SPL Traceability Experimental Suite

Author: Tassio Vale
Website: www.tassiovale.com
Contact: tassio.vale@ufrb.edu.br

This script was implemented to automatically parse the true traces generated by the CPPStats tool into
the SPLTrac true traces files.
"""


def extract_file_name(cppstats_file_name):
    file_split = cppstats_file_name.split("_cppstats_featurelocations/")
    if len(file_split) > 1:
        file = 'source/' + file_split[1][:-4]
        return file
    else:
        return cppstats_file_name


def add_feature_names_from_macro(macro, symbol):
    line = ''
    if symbol in macro:
        for word in macro.split(symbol):
            if len(word) > 1:
                line += word + ','
    return line


config_file_name='../files/projects_preprocessor.dat'

config_file = open(config_file_name, 'r')
projects_base_path = config_file.readline()

for line in config_file:
    traces_dictionary = {}

    (project, language, variability_impl_technology, loc) = line.split()
    path = projects_base_path.replace('\n', '')  # it removes the newline character ('\n') from the path
    features_file_name = path + project + '/listoffeatures.csv'

    # print(project)
    with open(features_file_name, 'rt', encoding='utf8') as csv_file:
        features_reader = csv.reader(csv_file, delimiter=',', quotechar='\"')
        for row in features_reader:
            if len(row) > 1:
                file_name = extract_file_name(row[0])
                # print('File: ' + file_name)

                macros_list = row[1].split(";")
                # print('Macros: ' + str(macros_list))

                for macro in macros_list:
                    if macro not in traces_dictionary:
                        traces_dictionary[macro.lower()] = []
                    traces_dictionary[macro.lower()].append(file_name)

    # print(traces_dictionary)
    oracle_file_name = '../preprocessor_projects/' + project + '/traceability_oracle.dat'
    with open(oracle_file_name, 'w') as oracle_file:
        line_str = ''
        for macro in traces_dictionary.keys():
            if macro:
                line_str = macro + ':'
                for file_name in traces_dictionary[macro]:
                    line_str += file_name + ','
                line_str = line_str[:-1] + "\n"
                oracle_file.write(line_str)


    thesaurus_file_name = '../preprocessor_projects/' + project + '/thesaurus.dat'
    with open(thesaurus_file_name, 'w') as thesaurus_file:
        for macro in traces_dictionary.keys():
            if macro:
                macro = macro.replace("__", "")
                line_str = macro + ':'
                line_str += add_feature_names_from_macro(macro, "_")
                line_str = line_str[:-1] + '\n'
                thesaurus_file.write(line_str)